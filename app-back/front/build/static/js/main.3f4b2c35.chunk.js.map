{"version":3,"sources":["utils/useForm.js","components/CreateJob.js","components/Job.js","components/Jobs.js","index.js"],"names":["useForm","schema","updateJobs","useState","inputs","setInputs","errors","setErrors","validate","handleSubmit","event","preventDefault","error","console","fetch","method","headers","body","JSON","stringify","then","res","status","handleInputChange","target","name","value","Joi","required","trim","company","salary","city","FORM","label","CreateJobs","props","hasError","needsMessage","some","e","context","key","find","message","Container","onSubmit","Grid","container","spacing","justify","style","marginTop","item","Typography","variant","align","map","f","xs","TextField","onChange","helperText","fullWidth","Button","type","color","Job","offer","Jobs","offers","state","setState","loading","setLoading","useEffect","json","display","justifyContent","alignItems","CircularProgress","i","CreateJob","j","s","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f4b2c35.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst useForm = (schema, updateJobs) => {\n  const [inputs, setInputs] = useState({});\n  const [errors, setErrors] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const { error } = validate();\n    if (!error) {\n      const url = \"/offers/create\";\n      fetch(url, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(inputs),\n      }).then((res) => {\n        if (res.status === 200) updateJobs(inputs);\n        else console.error(error);\n      });\n    } else {\n      console.error(error);\n      setErrors(error);\n    }\n  };\n\n  const handleInputChange = (event) => {\n    setInputs({ ...inputs, [event.target.name]: event.target.value });\n  };\n\n  const validate = () => {\n    return schema.validate(inputs);\n  };\n\n  return { handleSubmit, handleInputChange, errors };\n};\n\nexport default useForm;\n","import React from \"react\";\nimport {\n  Container,\n  TextField,\n  Grid,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport useForm from \"./../utils/useForm\";\nimport * as Joi from \"joi\";\n\nconst schema = Joi.object({\n  name: Joi.string().required().trim(),\n  company: Joi.string().required().trim(),\n  salary: Joi.string().required().trim(),\n  city: Joi.string().required().trim(),\n});\n\nconst FORM = [\n  {\n    label: \"Job offer name\",\n    name: \"name\",\n  },\n  {\n    label: \"Company name\",\n    name: \"company\",\n  },\n  {\n    label: \"Salary\",\n    name: \"salary\",\n  },\n  {\n    label: \"City\",\n    name: \"city\",\n  },\n];\n\nfunction CreateJobs(props) {\n  const { handleSubmit, handleInputChange, errors } = useForm(\n    schema,\n    props.updateJobs\n  );\n\n  const hasError = (name, needsMessage) => {\n    if (errors && errors.some((e) => e.context.key === name))\n      return needsMessage\n        ? errors.find((e) => e.context.key === name).message\n        : true;\n    return needsMessage ? \"\" : false;\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <Grid container spacing={2} justify=\"center\" style={{ marginTop: 32 }}>\n          <Grid item>\n            <Typography variant=\"h3\" align=\"center\">\n              Crea una oferta\n            </Typography>\n          </Grid>\n          {FORM.map((f) => (\n            <Grid item xs={12} key={f.name}>\n              <TextField\n                variant=\"outlined\"\n                label={f.label}\n                name={f.name}\n                onChange={handleInputChange}\n                error={hasError(f.name)}\n                helperText={hasError(f.name, true)}\n                fullWidth={true}\n                required\n              />\n            </Grid>\n          ))}\n          <Grid item>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Crear oferta\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  );\n}\n\nexport default CreateJobs;\n","import React, { useState } from \"react\";\n\nconst Job = (props) => {\n  const [offer] = useState({\n    name: props.offer.name,\n    company: props.offer.company,\n    salary: props.offer.salary,\n    city: props.offer.city,\n  });\n\n  const renderOffer = () => (\n    <div>\n      <h2>{offer.name}</h2>\n      <h3>{offer.company}</h3>\n      <h4>{offer.salary}</h4>\n      <h5>{offer.city}</h5>\n      <hr />\n    </div>\n  );\n\n  return <div>{renderOffer()}</div>;\n};\n\nexport default Job;\n","import React, { useState, useEffect } from \"react\";\nimport CreateJobs from \"./CreateJob\";\nimport { Typography, CircularProgress } from \"@material-ui/core\";\nimport Job from \"./Job\";\n\nconst Jobs = () => {\n  const [state, setState] = useState({ offers: [] });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    const url = \"/offers\";\n    fetch(url)\n      .then((res) => {\n        return res.json();\n      })\n      .then((offers) => {\n        setState({ offers });\n        setLoading(false);\n      });\n  }, []);\n\n  const renderLoading = () => (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <CircularProgress />\n    </div>\n  );\n\n  return (\n    <div>\n      <Typography variant=\"h3\" align=\"center\">\n        Ofertas laborales\n      </Typography>\n      {loading && renderLoading()}\n      {state.offers.map((e, i) => (\n        <Job key={i} offer={e} loading={loading} />\n      ))}\n      <CreateJobs\n        updateJobs={(j) => setState((s) => ({ offers: [...s.offers, j] }))}\n      />\n    </div>\n  );\n};\n\nexport default Jobs;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Jobs from \"./components/Jobs\";\n\nReactDOM.render(<Jobs />, document.getElementById(\"root\"));\n"],"sourceRoot":""}